import requests
API_TOKEN = 'af7e3e046c4aa9bff6277b08d5b7a0c7'
import requests
import asyncio
from aiogram.types import Message
import matplotlib.pyplot as plt
import pandas as pd
import sqlite3
import asyncio
from aiogram.types import Message


async def create_requests_chart():
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = get_statistics(limit=15)  # –ë–µ—Ä–µ–º —Ç–æ–ø-15 –≥–æ—Ä–æ–¥–æ–≤

        if not stats:
            return None, "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(stats, columns=['city_name', 'request_count'])

        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
        plt.figure(figsize=(12, 8))
        plt.pie(df['request_count'], labels=df['city_name'], autopct='%1.1f%%')
        plt.title('üìä –¢–æ–ø –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º –ø–æ–≥–æ–¥—ã', fontsize=14, pad=20)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        plt.savefig('weather_stats.png', dpi=300, bbox_inches='tight')
        plt.close()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_requests = df['request_count'].sum()
        stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:\n–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
        stats_text += f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: {len(df)}\n\n"
        stats_text += "–¢–æ–ø-5 –≥–æ—Ä–æ–¥–æ–≤:\n"

        for i, (city, count) in enumerate(stats[:5], 1):
            stats_text += f"{i}. {city.title()}: {count} –∑–∞–ø—Ä–æ—Å–æ–≤\n"

        return 'weather_stats.png', stats_text

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
        return None, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"


async def get_weather(city: str) -> float:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã"""
    params = {
        'q': city,
        'appid': API_TOKEN,
        'units': 'metric',
        'lang': 'ru'
    }

    # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
    loop = asyncio.get_event_loop()
    response = await loop.run_in_executor(
        None,
        lambda: requests.get("https://api.openweathermap.org/data/2.5/weather", params=params, timeout=10)
    )

    if response.status_code == 200:
        data = response.json()
        temperature = data['main']['temp']
        return round(temperature, 1)
    else:
        raise Exception(f"–ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ API")


import sqlite3


def save_city_stat(city_name):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ—Ä–æ–¥—É"""
    if not city_name or not city_name.strip():
        return

    city_lower = city_name.lower().strip()
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥: '{city_lower}'")

    conn = sqlite3.connect('weather_stats.db')
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ä–æ–¥ –≤ –±–∞–∑–µ
        cursor.execute("SELECT request_count FROM city_requests WHERE city_name = ?", (city_lower,))
        result = cursor.fetchone()

        if result:
            # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –µ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            new_count = result[0] + 1
            cursor.execute("UPDATE city_requests SET request_count = ? WHERE city_name = ?", (new_count, city_lower))
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –≥–æ—Ä–æ–¥ {city_lower}: {result[0]} ‚Üí {new_count}")
        else:
            # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º —Å —Å—á–µ—Ç—á–∏–∫–æ–º 1
            cursor.execute("INSERT INTO city_requests (city_name, request_count) VALUES (?, 1)", (city_lower,))
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥: {city_lower}")

        conn.commit()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    finally:
        conn.close()


def get_statistics(limit=10):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('weather_stats.db')
    cursor = conn.cursor()
    cursor.execute("SELECT city_name, request_count FROM city_requests ORDER BY request_count DESC LIMIT ?", (limit,))
    stats = cursor.fetchall()
    conn.close()
    return stats