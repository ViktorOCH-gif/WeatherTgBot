import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from api__test2 import get_weather
from api__test2 import save_city_stat, get_statistics

BOT_TOKEN = "7585833404:AAFLKuIiTYjQsgcV2kng94mqBKaOvnLhNGM"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]],
    resize_keyboard=True
)

def init_db():
    conn = sqlite3.connect('weather_stats.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS city_requests (
            city_name TEXT PRIMARY KEY,
            request_count INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã.", reply_markup=keyboard)


@dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message):
    stats = get_statistics()

    if stats:
        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≥–æ—Ä–æ–¥–æ–≤:\n"
        for i, (city, count) in enumerate(stats, 1):
            response += f"{i}. {city.title()}: {count} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
    else:
        response = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞"

    await message.answer(response)


@dp.message()
async def handle_city(message: Message):
    city = message.text.strip()

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –≥–æ—Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if city.startswith('/'):
        return

    print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥: '{city}'")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    save_city_stat(city)
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞: '{city}'")

    try:
        weather_info = await get_weather(city)
        await message.answer(f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city}: {weather_info}", reply_markup=keyboard)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}", reply_markup=keyboard)


async def main():
    init_db()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())